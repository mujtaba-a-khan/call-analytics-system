[build-system]
requires = ["setuptools>=70.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "call-analytics-system"
version = "1.0.0"
description = "Professional call analytics system with local LLM and semantic search"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [{ name = "Mujtaba Khan", email = "mmak.edu.de@gmail.com" }]
keywords = ["analytics", "call-center", "speech-to-text", "semantic-search", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Business",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business",
]

# Main application dependencies with Python 3.13 compatible versions
dependencies = [
    # Core framework
    "streamlit>=1.35.0,<2.0.0",
    
    # Data processing
    "pandas>=2.2.0,<3.0.0",
    "numpy>=1.26.0,<2.0.0",
    "pydantic>=2.7.0,<3.0.0",
    
    # Configuration management
    "toml>=0.10.2,<1.0.0",
    "pyyaml>=6.0.1,<7.0.0",
    
    # Audio processing
    "faster-whisper>=1.0.0,<2.0.0",
    "pydub>=0.25.1,<1.0.0",
    "ffmpeg-python>=0.2.0,<1.0.0",
    "soundfile>=0.12.1,<1.0.0",
    "librosa>=0.10.0,<1.0.0",
    
    # Vector database
    #"chromadb>=0.5.0,<1.0.0",
    
    # Local LLM support (optional)
    "ollama>=0.3.0,<1.0.0",
    
    # Visualization
    "plotly>=5.22.0,<6.0.0",
    "matplotlib>=3.8.0,<4.0.0",
    
    # ML and embeddings
    "sentence-transformers>=3.0.0,<4.0.0",
    "torch>=2.3.0,<3.0.0",
    "transformers>=4.40.0,<5.0.0",
    "accelerate>=0.30.0,<1.0.0",

    # NL date parsing
    "dateparser>=1.2.0",  
    
    # Utilities
    "python-dateutil>=2.9.0,<3.0.0",
    "pytz>=2024.1",
    "phonenumbers>=8.13.0,<9.0.0",
    "tqdm>=4.66.0,<5.0.0",
    "requests>=2.32.0,<3.0.0",
    "psutil>=5.9.0,<6.0.0",
    "chardet>=5.2.0,<6.0.0",
    "xlsxwriter>=3.2.0,<4.0.0",
    "openpyxl>=3.1.0,<4.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.2.0,<9.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "black>=24.4.0,<25.0.0",
    "ruff>=0.4.0,<1.0.0",
    "mypy>=1.10.0,<2.0.0",
    "pre-commit>=3.7.0,<4.0.0",
    "ipython>=8.24.0,<9.0.0",
    "ipdb>=0.13.13,<1.0.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.3.0,<8.0.0",
    "sphinx-rtd-theme>=2.0.0,<3.0.0",
    "myst-parser>=3.0.0,<4.0.0",
    "sphinx-autodoc-typehints>=2.0.0,<3.0.0",
]

# Testing dependencies
test = [
    "pytest>=8.2.0,<9.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "pytest-timeout>=2.3.0,<3.0.0",
    "pytest-xdist>=3.6.0,<4.0.0",
    "faker>=25.0.0,<26.0.0",
]

[project.scripts]
# CLI commands for easy execution
call-analytics = "src.cli:main"
call-analytics-ui = "src.ui.app:main"
rebuild-index = "scripts.rebuild_index:main"
download-models = "scripts.download_models:main"
setup-environment = "scripts.setup_environment:main"

[project.urls]
"Homepage" = "https://github.com/mujtaba-a-khan/call-analytics-system"

[tool.setuptools]
package-dir = { "" = "." }
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*", "config*"]
exclude = ["tests*", "docs*", "*.egg-info"]

[tool.setuptools.package-data]
"*" = ["*.toml", "*.yaml", "*.yml", "*.json", "*.md"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py313"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "ASYNC",# flake8-async
]
ignore = [
    "E203",  # Whitespace before ':'
    "W503",  # Line break before binary operator
    "B008",  # Do not perform function calls in argument defaults
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.isort]
known-first-party = ["src", "scripts"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "chromadb.*",
    "whisper.*",
    "ollama.*",
    "sentence_transformers.*",
    "torch.*",
    "librosa.*",
    "soundfile.*",
    "pydub.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--tb=short",
    "--maxfail=1",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]